filenames [ '.ui.js', '.NOTES.md' ]
--- 1 ---

Files
=====

## /NOTES.md (size: 746 bytes)

```javascript
    
    Files
    =====
    
    ## /NOTES.md (size: %%%size['/.NOTES.md']%%% bytes)
    
    ```javascript
        %%%code['/.NOTES.md']%%%
    ```
    
    ## /main.sh (size: %%%size['/main.sh']%%% bytes)
    
    ```javascript
    %%%code['/main.sh']%%%
    ```
    
    ## /inf.json (size: %%%size['/inf.json']%%% bytes)
    
    ```javascript
    %%%code['/inf.json']%%%
    ```
    
    ## /reflector.inf.js (size: %%%size['/reflector.inf.js']%%% bytes)
    
    ```javascript
    %%%code['/reflector.inf.js']%%%
    ```
    
    ## /bundle.inf.js (size: %%%size['/bundle.inf.js']%%% bytes)
    
    ```javascript
    %%%code['/bundle.inf.js']%%%
    ```
    
    ## /.~inf.json~infi.log (size: %%%size['/.~inf.json~infi.log']%%% bytes)
    
    ```javascript
    %%%code['/.~inf.json~infi.log']%%%
    ```
    
    ## /ui.js (size: %%%size['/.ui.js']%%% bytes)
    
    ```javascript
    %%%code['/.ui.js']%%%
    ```
    
```

## /main.sh (size: 718 bytes)

```javascript
#!/usr/bin/env bash.origin.script

inf inf.json

echo '--- 1 ---'

cat .NOTES.md

echo '--- 2 ---'

echo ">>>TEST_IGNORE_LINE:\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}<<<"

cat .ui.js
cp -f .ui.js .ui.js~before
perl -i -pe 's/Count: 1/Count: 2/g' .ui.js

echo '--- 3 ---'

cat .ui.js

cp -f bundle.inf.js bundle.inf.js~before
inf {
    "bundle ##": "it.pinf.inf/plugins/node-aspect-utils.",
    "bundle ##": "./reflector.",
    "bundle #": "./bundle.",
    "bundle # reflect": "contract"
}

echo '--- 4 ---'

diff -u .ui.js .ui.js~before || true

echo '--- 5 ---'

diff -u bundle.inf.js bundle.inf.js~before || true

echo '--- 6 ---'

rm -f .ui.js .ui.js~before

rm -f bundle.inf.js
mv -f bundle.inf.js~before bundle.inf.js

```

## /inf.json (size: 178 bytes)

```javascript
#!/usr/bin/env inf
{
    "bundle ##": "it.pinf.inf/plugins/node-aspect-utils.",
    "bundle ##": "./reflector.",

    "bundle #": "./bundle.",

    "bundle # reflect": "expand"
}
```

## /reflector.inf.js (size: 6573 bytes)

```javascript

'use strict';

exports.inf = async function (inf) {
   
    return {

        inf: async function (inf) {
            
            return {

                Component: {

                    invoke: async function (pointer, value) {
                        let self = this;

                        if (pointer === "reflect") {
                            
                            let reflectionDir = inf.LIB.PATH.dirname(self.path);

                            if (value.value === "expand") {

                                function varPlaceholder (key) {
                                    const val = new String(`${key}`);
                                    val.replaceVariables = false;
                                    return val;
                                }
            
                                let filenames = await inf.expandNodeAspectsTo(/^\//, reflectionDir, function (aspect, key) {

                                    if (aspect === '/.NOTES') {
                                        var keyParts = key.match(/^([^\[]+)\['([^']+)'\]$/);
                                        if (!keyParts) {
                                            return key;
                                        }
                                        if (keyParts[1] === 'size') {
                                            if (
                                                keyParts[2] === '/.NOTES.md' ||
                                                keyParts[2] === '/.ui.js'
                                            ) {
                                                return inf.getNodeAspect(keyParts[2].replace(/\.md$/, ""), varPlaceholder).length;
                                            }
                                            if (!inf.LIB.FS.existsSync(inf.LIB.PATH.join(reflectionDir, keyParts[2]))) {
                                                return '0';
                                            }
                                            return inf.LIB.FS.statSync(inf.LIB.PATH.join(reflectionDir, keyParts[2])).size;
                                        } else
                                        if (keyParts[1] === 'code') {
                                            if (
                                                keyParts[2] === '/.NOTES.md' ||
                                                keyParts[2] === '/.ui.js'
                                            ) {
                                                let code = inf.getNodeAspect(keyParts[2].replace(/\.md$/, ""), varPlaceholder);
                                                code = new String(code);
                                                code.replaceVariables = false;
                                                return code;
                                            }
                                            if (!inf.LIB.FS.existsSync(inf.LIB.PATH.join(reflectionDir, keyParts[2]))) {
                                                return '';
                                            }
                                            let code = inf.LIB.FS.readFileSync(inf.LIB.PATH.join(reflectionDir, keyParts[2]), 'utf8');
                                            if (keyParts[2] === '/bundle.inf.js') {
                                                code = new String(code);
                                                code.replaceVariables = false;
                                            }
                                            return code;
                                        }
            
                                        throw new Error(`No value for key '${key}' in aspect '${aspect}'!`);
                                    } else {
                                        throw new Error(`Unknown aspect '${aspect}'!`);
                                    }
                                }, {
                                    mapFilepath: function (filepath) {
                                        if (filepath === '/.NOTES') {
                                            return '/.NOTES.md';
                                        }
                                        return filepath;
                                    }
                                });

                                console.log("filenames", filenames);

                                return;
                            } else
                            if (value.value === "contract") {
            
                                let code = await inf.LIB.FS.readFileAsync(inf.LIB.PATH.join(reflectionDir, '/.ui.js'), 'utf8');
                                let bundlePath = inf.LIB.PATH.join(reflectionDir, '/bundle.inf.js');
                                let bundle = await inf.LIB.FS.readFileAsync(bundlePath, 'utf8');
            
                                // TODO: Fix codeblock parsing so we can use codeblock syntax in regexp without interference.
                                let indentRe = new RegExp('^([\\s\\t]*)"\\/\\.ui\\.js": \\(javascript \\(\\) >' + '>>', 'm');
                                let indent = bundle.match(indentRe)[1];
                                if (/\s$/.test(indent)) {
                                    indent += '    ';   // 4 spaces soft tab
                                } else
                                if (/\s$/.test(indent)) {
                                    indent += ' ';      // 1 hard tab
                                }
                                code = code.split("\n").map(function (line, i) {
                                    return indent + line;
                                });
                                code = code.slice(1, code.length - 2).join("\n").replace(/(^\n|\n$)/g, "");
            
                                // TODO: Fix codeblock parsing so we can use codeblock syntax in regexp without interference.
                                let bundleRe = new RegExp('("\\/\\.ui\\.js": \\(javascript \\(\\) >' + '>>\\s*\\n)[\\s\\S]+?(\\s*<<' + '<\\),)');
                                bundle = bundle.replace(bundleRe, "$1" + code + "$2");
            
                                await inf.LIB.FS.writeFileAsync(bundlePath, bundle, 'utf8');
            
                                return;
                            }

                            throw new Error("NYI");
                        }

                        return self.invoke(pointer, value);
                    }
                }
            };
        }
    };
}

```

## /bundle.inf.js (size: 1335 bytes)

```javascript

'use strict';

exports.inf = async function (inf) {

    return {

        "/.ui.js": (javascript () >>>

            console.log("Count: 1");

        <<<),

        "/.NOTES": (markdown (code, size) >>>

            Files
            =====

            ## /NOTES.md (size: %%%size['/.NOTES.md']%%% bytes)

            ```javascript
                %%%code['/.NOTES.md']%%%
            ```

            ## /main.sh (size: %%%size['/main.sh']%%% bytes)

            ```javascript
            %%%code['/main.sh']%%%
            ```

            ## /inf.json (size: %%%size['/inf.json']%%% bytes)

            ```javascript
            %%%code['/inf.json']%%%
            ```

            ## /reflector.inf.js (size: %%%size['/reflector.inf.js']%%% bytes)

            ```javascript
            %%%code['/reflector.inf.js']%%%
            ```

            ## /bundle.inf.js (size: %%%size['/bundle.inf.js']%%% bytes)

            ```javascript
            %%%code['/bundle.inf.js']%%%
            ```

            ## /.~inf.json~infi.log (size: %%%size['/.~inf.json~infi.log']%%% bytes)

            ```javascript
            %%%code['/.~inf.json~infi.log']%%%
            ```

            ## /ui.js (size: %%%size['/.ui.js']%%% bytes)

            ```javascript
            %%%code['/.ui.js']%%%
            ```

        <<<)
    };
}

```

## /.~inf.json~infi.log (size: 122 bytes)

```javascript
bundle ##	"it.pinf.inf/plugins/node-aspect-utils."
bundle ##	"./reflector."
bundle #	"./bundle."
bundle # reflect	"expand"
```

## /ui.js (size: 26 bytes)

```javascript

console.log("Count: 1");

```

--- 2 ---
>>>TEST_IGNORE_LINE:\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}<<<

console.log("Count: 1");

--- 3 ---

console.log("Count: 2");

--- 4 ---
@@ -1,3 +1,3 @@
 
-console.log("Count: 2");
+console.log("Count: 1");
 
--- 5 ---
@@ -7,7 +7,7 @@
 
         "/.ui.js": (javascript () >>>
 
-            console.log("Count: 2");
+            console.log("Count: 1");
 
         <<<),
 
--- 6 ---
